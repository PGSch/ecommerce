services:
  api-gateway:
    build: ./api-gateway
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - PRODUCTS_SERVICE_URL=http://product-service:4000
      - ORDERS_SERVICE_URL=http://order-service:5000
    depends_on:
      - product-service
      - order-service

  product-service:
    build: ./product-service
    ports:
      - "4000:4000"
    environment:
      - PORT=4000
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      - db

  order-service:
    build: ./order-service
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
    depends_on:
      - db
      - rabbitmq
    restart: on-failure

  frontend:
    build: ./frontend
    ports:
      - "8080:3000"
    environment:
      - REACT_APP_API_URL=http://api-gateway:3000

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672" # RabbitMQ management UI
      - "5672:5672"
    environment:
        RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
        RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
        test: ["CMD-SHELL", "rabbitmqctl status"]
        interval: 10s
        timeout: 5s
        retries: 5
  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
        interval: 10s
        timeout: 5s
        retries: 5
volumes:
  db_data:
